{
    "dataType": "CVE_RECORD",
    "dataVersion": "5.0",
    "cveMetadata": {
        "cveId": "CVE-2024-1631",
        "assignerOrgId": "6b35d637-e00f-4228-858c-b20ad6e1d07b",
        "state": "PUBLISHED",
        "assignerShortName": "Dfinity",
        "dateReserved": "2024-02-19T15:58:47.713Z",
        "datePublished": "2024-02-21T02:12:38.403Z",
        "dateUpdated": "2024-02-21T05:01:15.442Z"
    },
    "containers": {
        "cna": {
            "affected": [
                {
                    "defaultStatus": "unaffected",
                    "product": "agent-js",
                    "programFiles": [
                        "https://github.com/dfinity/agent-js/blob/main/packages/identity/src/identity/ed25519.ts"
                    ],
                    "vendor": "Internet Computer",
                    "versions": [
                        {
                            "lessThan": "v1.0.1",
                            "status": "affected",
                            "version": "v0.20.0-beta.0",
                            "versionType": "1.0.1"
                        }
                    ]
                }
            ],
            "descriptions": [
                {
                    "lang": "en",
                    "supportingMedia": [
                        {
                            "base64": false,
                            "type": "text/html",
                            "value": "Impact: The library offers a function to generate an ed25519 key pair via Ed25519KeyIdentity.generate with an optional param to provide a 32 byte seed value, which will then be used as the secret key. When no seed value is provided, it is expected that the library generates the secret key using secure randomness. However, a recent change broke this guarantee and uses an insecure seed for key pair generation. Since the private key of this identity (535yc-uxytb-gfk7h-tny7p-vjkoe-i4krp-3qmcl-uqfgr-cpgej-yqtjq-rqe) is compromised, one could lose funds associated with the principal on ledgers or lose access to a canister where this principal is the controller. Users are asked to take proactive measures mentioned below in Workarounds section.<br><br>Patches:<br>A patch for the vulnerability is available in v1.0.1 for all the packages listed in the advisory. Please upgrade and deploy your canisters immediately.<br><br>Workarounds:<br><br>Developers:<br>The recommended fix is to upgrade the package to the patched version. If that is not possible, there are a couple of workarounds to handle the insecure key generation.<br><br>- Invoking the function as Ed25519KeyIdentity.generate(null) would fix the broken conditional evaluation and force the function to generate a securely random seed. However, this is not guaranteed to work for future upgrades.<br>- Passing a securely generated randomness as a seed to Ed25519KeyIdentity.generate would force the library to use it as the seed to generate the key pair.<br><br>Users:<br>Removing a controller of a canister if it's the affected principal<br>For all canisters you control, fetch the controllers of the canisters using<br>dfx canister info --ic &lt;CANISTER&gt;<br>&nbsp; &nbsp; If you see the principal 535yc-uxytb-gfk7h-tny7p-vjkoe-i4krp-3qmcl-uqfgr-cpgej-yqtjq-rqe as one of the controllers, follow the steps below<br>dfx identity whoami # record CURRENT_IDENTITY<br><br>dfx identity new &lt;NEW_IDENTITY_NAME&gt; <br>dfx identity use &lt;NEW_IDENTITY_NAME&gt; <br>dfx identity get-principal &lt;NEW_IDENTITY_NAME&gt; # record NEW_IDENTITY_PRINCIPAL<br><br>dfx identity use &lt;CURRENT_IDENTITY&gt;<br>dfx canister update-settings --ic &lt;CANISTER&gt; --add-controller &lt;NEW_IDENTITY_PRINCIPAL&gt;<br>dfx canister update-settings --ic &lt;CANISTER&gt; --remove-controller `535yc-uxytb-gfk7h-tny7p-vjkoe-i4krp-3qmcl-uqfgr-cpgej-yqtjq-rqe`<br>&nbsp; &nbsp; For more details on canister management, please visit here<br>Checking funds on wallets /  ledgers<br>If you have funds on ledgers using a browser wallet, please check if the account principal matches 535yc-uxytb-gfk7h-tny7p-vjkoe-i4krp-3qmcl-uqfgr-cpgej-yqtjq-rqe. If it does, please create a new account and transfer the funds to the new account immediately."
                        }
                    ],
                    "value": "Impact: The library offers a function to generate an ed25519 key pair via Ed25519KeyIdentity.generate with an optional param to provide a 32 byte seed value, which will then be used as the secret key. When no seed value is provided, it is expected that the library generates the secret key using secure randomness. However, a recent change broke this guarantee and uses an insecure seed for key pair generation. Since the private key of this identity (535yc-uxytb-gfk7h-tny7p-vjkoe-i4krp-3qmcl-uqfgr-cpgej-yqtjq-rqe) is compromised, one could lose funds associated with the principal on ledgers or lose access to a canister where this principal is the controller. Users are asked to take proactive measures mentioned below in Workarounds section.\n\nPatches:\nA patch for the vulnerability is available in v1.0.1 for all the packages listed in the advisory. Please upgrade and deploy your canisters immediately.\n\nWorkarounds:\n\nDevelopers:\nThe recommended fix is to upgrade the package to the patched version. If that is not possible, there are a couple of workarounds to handle the insecure key generation.\n\n- Invoking the function as Ed25519KeyIdentity.generate(null) would fix the broken conditional evaluation and force the function to generate a securely random seed. However, this is not guaranteed to work for future upgrades.\n- Passing a securely generated randomness as a seed to Ed25519KeyIdentity.generate would force the library to use it as the seed to generate the key pair.\n\nUsers:\nRemoving a controller of a canister if it's the affected principal\nFor all canisters you control, fetch the controllers of the canisters using\ndfx canister info --ic <CANISTER>\n    If you see the principal 535yc-uxytb-gfk7h-tny7p-vjkoe-i4krp-3qmcl-uqfgr-cpgej-yqtjq-rqe as one of the controllers, follow the steps below\ndfx identity whoami # record CURRENT_IDENTITY\n\ndfx identity new <NEW_IDENTITY_NAME> \ndfx identity use <NEW_IDENTITY_NAME> \ndfx identity get-principal <NEW_IDENTITY_NAME> # record NEW_IDENTITY_PRINCIPAL\n\ndfx identity use <CURRENT_IDENTITY>\ndfx canister update-settings --ic <CANISTER> --add-controller <NEW_IDENTITY_PRINCIPAL>\ndfx canister update-settings --ic <CANISTER> --remove-controller `535yc-uxytb-gfk7h-tny7p-vjkoe-i4krp-3qmcl-uqfgr-cpgej-yqtjq-rqe`\n    For more details on canister management, please visit here\nChecking funds on wallets /  ledgers\nIf you have funds on ledgers using a browser wallet, please check if the account principal matches 535yc-uxytb-gfk7h-tny7p-vjkoe-i4krp-3qmcl-uqfgr-cpgej-yqtjq-rqe. If it does, please create a new account and transfer the funds to the new account immediately."
                }
            ],
            "impacts": [
                {
                    "descriptions": [
                        {
                            "lang": "en",
                            "value": "Broken access control"
                        }
                    ]
                }
            ],
            "metrics": [
                {
                    "cvssV3_1": {
                        "attackComplexity": "LOW",
                        "attackVector": "NETWORK",
                        "availabilityImpact": "NONE",
                        "baseScore": 9.1,
                        "baseSeverity": "CRITICAL",
                        "confidentialityImpact": "HIGH",
                        "integrityImpact": "HIGH",
                        "privilegesRequired": "NONE",
                        "scope": "UNCHANGED",
                        "userInteraction": "NONE",
                        "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N",
                        "version": "3.1"
                    },
                    "format": "CVSS",
                    "scenarios": [
                        {
                            "lang": "en",
                            "value": "GENERAL"
                        }
                    ]
                }
            ],
            "problemTypes": [
                {
                    "descriptions": [
                        {
                            "cweId": "CWE-321",
                            "description": "CWE-321: Use of Hard-coded Cryptographic Key",
                            "lang": "en",
                            "type": "CWE"
                        }
                    ]
                },
                {
                    "descriptions": [
                        {
                            "cweId": "CWE-330",
                            "description": "CWE-330: Use of Insufficiently Random Values",
                            "lang": "en",
                            "type": "CWE"
                        }
                    ]
                }
            ],
            "providerMetadata": {
                "orgId": "6b35d637-e00f-4228-858c-b20ad6e1d07b",
                "shortName": "Dfinity",
                "dateUpdated": "2024-02-21T05:01:15.442Z"
            },
            "references": [
                {
                    "url": "https://github.com/dfinity/agent-js/pull/851"
                },
                {
                    "url": "https://www.npmjs.com/package/@dfinity/identity/v/1.0.1"
                },
                {
                    "url": "https://github.com/dfinity/agent-js"
                },
                {
                    "url": "https://agent-js.icp.xyz/identity/index.html"
                }
            ],
            "source": {
                "discovery": "UNKNOWN"
            },
            "title": "agent-js: Insecure Key Generation in `Ed25519KeyIdentity.generate`",
            "x_generator": {
                "engine": "Vulnogram 0.1.0-dev"
            }
        }
    }
}